version: '3.4'
services:
  # seeds blockchain data to other nodes.
  # ipfscache:
  #   image: ipfs/go-ipfs:latest
  #   volumes:
  #     - ipfsdata:/data/ipfs
  #   environment:
  #     IPFS_PATH: /data/ipfs
  #   deploy:
  #     mode: replicated
  #     replicas: 1
  #     placement:
  #       constraints: 
  #         - engine.labels.purpose == bitcoin


networks:
  webproxynet:
  onionnet: #how external peers reach bitcoind for block relay and peer network
  tornet:  #how bitcoin connects to peer network
  lndrpcnet:  #connect to this if you need to communicate with lnd RPC
  lightningdrpcnet: #connect to talk to clightning/lightningd
  bitcoindrpcnet:
    attachable: true
  kafka_kafkanet:
    external: true


volumes:
  ipfsdata:
    external: true
  

  torproxy-log-data:

  lnd-data:
  lnd-log-data:

  lightningd-data:
  lightningd-log-data:

    
  onionservice-data:
    driver: local
  
  # anyone who needs to access lnd's gRPC or REST interface must have access to this data.
  lnd-certificate-data:  
  lnd-macaroon-data: 

configs:
  onionproxyconf:
    file: ./onionproxy/nginx.conf
  lncli-web_config:
    file: ./lncliweb/lncli-web.lncliweb.conf.js
  bitcoindtorproxy-config:
    file: ./bitcoind/torrc.conf


secrets:
  lnd_conf:
    file: "./lnd/lnd-${CHAIN:-testnet}.conf"
  # nginxbasicauth:
  #   file: ./secrets/httpusers.txt
  lightningd_conf:
    file:  ./lightningd/lightningd-${CHAIN:-testnet}.conf